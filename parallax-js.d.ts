export default class Parallax {
  constructor(element: any, options?: ParallaxOptions);
  element: any;
  inputElement: any;
  calibrationTimer: any;
  calibrationFlag: boolean;
  enabled: boolean;
  depthsX: any[];
  depthsY: any[];
  raf: any;
  bounds: any;
  elementPositionX: number;
  elementPositionY: number;
  elementWidth: number;
  elementHeight: number;
  elementCenterX: number;
  elementCenterY: number;
  elementRangeX: number;
  elementRangeY: number;
  calibrationX: number;
  calibrationY: number;
  inputX: number;
  inputY: number;
  motionX: number;
  motionY: number;
  velocityX: number;
  velocityY: number;
  onMouseMove(event: any): void;
  onDeviceOrientation(event: any): void;
  onDeviceMotion(event: any): void;
  onOrientationTimer(): void;
  onMotionTimer(): void;
  onCalibrationTimer(): void;
  onAnimationFrame(): void;
  onWindowResize(): void;
  windowWidth: number;
  windowHeight: number;
  windowCenterX: number;
  windowCenterY: number;
  windowRadiusX: number;
  windowRadiusY: number;
  portrait: boolean;
  desktop: boolean;
  motionSupport: boolean;
  orientationSupport: boolean;
  orientationStatus: number;
  motionStatus: number;
  initialise(): void;
  transform2DSupport: boolean;
  transform3DSupport: boolean;
  doReadyCallback(): void;
  updateLayers(): void;
  layers: any;
  updateDimensions(): void;
  updateBounds(): void;
  queueCalibration(delay: any): void;
  enable(): void;
  detectionTimer: any;
  disable(): void;
  calibrate(x: any, y: any): void;
  calibrateX: any;
  calibrateY: any;
  invert(x: any, y: any): void;
  invertX: any;
  invertY: any;
  friction(x: any, y: any): void;
  frictionX: any;
  frictionY: any;
  scalar(x: any, y: any): void;
  scalarX: any;
  scalarY: any;
  limit(x: any, y: any): void;
  limitX: any;
  limitY: any;
  origin(x: any, y: any): void;
  originX: any;
  originY: any;
  setInputElement(element: any): void;
  setPosition(element: any, x: any, y: any): void;
  rotate(beta: any, gamma: any): void;
  destroy(): void;
  version(): string;
}
export declare interface ParallaxOptions {
  relativeInput?: boolean;
  clipRelativeInput?: boolean;
  inputElement?: null;
  hoverOnly?: boolean;
  calibrationThreshold?: number;
  calibrationDelay?: number;
  supportDelay?: number;
  calibrateX?: boolean;
  calibrateY?: boolean;
  invertX?: boolean;
  invertY?: boolean;
  limitX?: boolean;
  limitY?: boolean;
  scalarX?: number;
  scalarY?: number;
  frictionX?: number;
  frictionY?: number;
  originX?: number;
  originY?: number;
  pointerEvents?: boolean;
  precision?: number;
  onReady?: null;
  selector?: string;
}
export {};
